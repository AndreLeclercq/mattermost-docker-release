name: Sync Mattermost v10 from Official Repo

on:
  schedule:
    # Daily check at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: andreleclercq/mattermost-team-edition

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest v10 release from Mattermost
        id: get-version
        run: |
          # Get the release tagged as "latest"
          LATEST_VERSION=$(curl -s https://api.github.com/repos/mattermost/mattermost/releases/latest | jq -r '.tag_name')
          echo "Latest GitHub release: $LATEST_VERSION"
          
          # Check if it's a v10.x version
          if [[ $LATEST_VERSION == v10.* ]]; then
            echo "‚úÖ Latest release is v10.x: $LATEST_VERSION"
            echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            echo "version-clean=${LATEST_VERSION#v}" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Latest release is not v10.x: $LATEST_VERSION"
            echo "should-build=false" >> $GITHUB_OUTPUT
          fi

      - name: Download official Mattermost files
        if: steps.get-version.outputs.should-build == 'true'
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          echo "Downloading files from Mattermost repo for $VERSION"
          
          # Download official Dockerfile
          curl -o Dockerfile \
            "https://raw.githubusercontent.com/mattermost/mattermost/$VERSION/server/build/Dockerfile"
          
          # Download passwd file
          curl -o passwd \
            "https://raw.githubusercontent.com/mattermost/mattermost/$VERSION/server/build/passwd"
          
          # Download entrypoint.sh
          curl -o entrypoint.sh \
            "https://raw.githubusercontent.com/mattermost/mattermost/$VERSION/server/build/entrypoint.sh"
          
          # Make entrypoint.sh executable
          chmod +x entrypoint.sh
          
          # Verify files are downloaded
          echo "Files downloaded:"
          ls -la Dockerfile passwd entrypoint.sh

      - name: Set up Docker Buildx
        if: steps.get-version.outputs.should-build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: steps.get-version.outputs.should-build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: steps.get-version.outputs.should-build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.version-clean }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get-version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:release-10
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Commit updated files (optional)
        if: steps.get-version.outputs.should-build == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Dockerfile passwd entrypoint.sh
          git commit -m "Update to Mattermost ${{ steps.get-version.outputs.version }}" || exit 0
          git push || exit 0

      - name: Summary
        run: |
          if [[ "${{ steps.get-version.outputs.should-build }}" == "true" ]]; then
            echo "‚úÖ Synced and built Mattermost ${{ steps.get-version.outputs.version }} from official repo"
            echo "üê≥ Available as: ${{ env.IMAGE_NAME }}:release-10"
          else
            echo "‚ÑπÔ∏è No sync needed - latest GitHub release is not v10.x"
          fi
